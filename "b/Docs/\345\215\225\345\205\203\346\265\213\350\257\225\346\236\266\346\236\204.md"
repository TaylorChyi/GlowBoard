# GlowBoard 单元测试架构

## 目标

本文档用于规划 GlowBoard 项目的单元测试架构，确保在后续开发中能够便捷地添加和维护测试代码，并通过持续集成保证核心功能的稳定性。

## 总体原则

- **使用 XCTest 框架**：iOS 平台的单元测试使用 Apple 官方提供的 XCTest，便于在 Xcode 与 CI 环境中执行。
- **测试目录结构**：所有测试代码统一放置在 `Tests/` 目录下，每个功能模块建立对应的子目录。
- **命名规范**：测试类以被测类名加 `Tests` 结尾，例如 `ScrollEngineTests`；测试方法以 `test` 前缀开头并描述预期行为。
- **隔离外部依赖**：对需要访问网络或文件系统的代码使用依赖注入并构建 Mock 对象，确保测试可重复执行。
- **持续集成**：通过 `xcodebuild test` 命令在本地或 CI 环境中运行测试，并在合并代码前确保测试全部通过。

## 目录结构示例

```
GlowBoard/
├── Sources/          # 主工程代码
├── Tests/
│   ├── ScrollEngine/
│   │   └── ScrollEngineTests.swift
│   └── ContentManager/
│       └── ContentManagerTests.swift
└── Docs/
    └── 单元测试架构.md
```

## 测试用例编写

1. **Arrange-Act-Assert 模式**：每个测试用例按准备数据、执行操作、断言结果的顺序编写，保持结构清晰。
2. **充分覆盖核心逻辑**：重点测试文本滚动、样式设置、导入导出等关键模块，确保边界条件和异常分支得到验证。
3. **使用测试夹具**：对于复杂依赖，可在测试类中创建专用的假数据或模拟对象，以减少重复代码。
4. **异步测试**：涉及异步回调时使用 `XCTestExpectation` 保证测试能够等待异步结果并在超时前完成。

## 执行测试

项目包含 Xcode 工程后，可使用以下命令执行全部单元测试：

```bash
xcodebuild test -scheme GlowBoard -destination 'platform=iOS Simulator,OS=latest,name=iPhone 14'
```

该命令将在模拟器环境下构建并运行所有位于 `Tests/` 目录中的测试目标。建议在持续集成流程中添加此命令，以便自动化验证每次提交。

## 代码覆盖率

启用 Xcode 的代码覆盖率功能，通过 `-enableCodeCoverage YES` 参数收集覆盖率数据，定期审查核心模块的覆盖率并不断补充测试。

## 总结

通过以上架构设计，GlowBoard 项目能够在后续开发过程中持续积累可靠的单元测试，为应用质量保驾护航。
